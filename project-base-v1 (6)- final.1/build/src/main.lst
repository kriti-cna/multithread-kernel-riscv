GAS LISTING /tmp/ccLW35yI.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB37:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by os on 9/5/22.
   3:src/main.cpp  **** //
   4:src/main.cpp  **** 
   5:src/main.cpp  **** #include "../lib/hw.h"
   6:src/main.cpp  **** #include "../h/memoryAllocator.hpp"
   7:src/main.cpp  **** #include "../h/riscv.hpp"
   8:src/main.cpp  **** #include "../h/syscall_c.h"
   9:src/main.cpp  **** #include "../h/syscall_cpp.hpp"
  10:src/main.cpp  **** #include "../h/riscv.hpp"
  11:src/main.cpp  **** 
  12:src/main.cpp  **** extern void userMain();
  13:src/main.cpp  **** 
  14:src/main.cpp  **** int main(){
  12              		.loc 1 14 11
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  15:src/main.cpp  ****     MemoryAllocator::getInstance();
  22              		.loc 1 15 5
  23              		.loc 1 15 34 is_stmt 0
  24 0010 97000000 		call	_ZN15MemoryAllocator11getInstanceEv@plt
  24      E7800000 
  25              	.LVL0:
  16:src/main.cpp  **** 
  17:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
  26              		.loc 1 17 5 is_stmt 1
  27              		.loc 1 17 19 is_stmt 0
  28 0018 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  28      83B70700 
  29              	.LVL1:
  30              	.LBB4:
  31              	.LBB5:
  32              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 9/5/22.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_V1_1_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_V1_1_RISCV_HPP
   7:src/../h/riscv.hpp **** #include "../lib/hw.h"
GAS LISTING /tmp/ccLW35yI.s 			page 2


   8:src/../h/riscv.hpp **** 
   9:src/../h/riscv.hpp **** class Riscv
  10:src/../h/riscv.hpp **** {
  11:src/../h/riscv.hpp **** public:
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non-inline function)
  14:src/../h/riscv.hpp ****     static void popSppSpie();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  17:src/../h/riscv.hpp ****     //static void pushRegisters();
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  20:src/../h/riscv.hpp ****     //static void popRegisters();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // read register scause
  23:src/../h/riscv.hpp ****     static uint64 r_scause();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // write register scause
  26:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register sepc
  29:src/../h/riscv.hpp ****     static uint64 r_sepc();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register sepc
  32:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register stvec
  35:src/../h/riscv.hpp ****     static uint64 r_stvec();
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register stvec
  38:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stval
  41:src/../h/riscv.hpp ****     static uint64 r_stval();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stval
  44:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     enum BitMaskSip
  47:src/../h/riscv.hpp ****     {
  48:src/../h/riscv.hpp ****         SIP_SSIE = (1 << 1),
  49:src/../h/riscv.hpp ****         SIP_STIE = (1 << 5),
  50:src/../h/riscv.hpp ****         SIP_SEIE = (1 << 9),
  51:src/../h/riscv.hpp ****     };
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask set register sip
  54:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // mask clear register sip
  57:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // read register sip
  60:src/../h/riscv.hpp ****     static uint64 r_sip();
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // write register sip
  63:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  64:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccLW35yI.s 			page 3


  65:src/../h/riscv.hpp ****     enum BitMaskSstatus
  66:src/../h/riscv.hpp ****     {
  67:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  68:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  69:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  70:src/../h/riscv.hpp ****     };
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // mask set register sstatus
  73:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // mask clear register sstatus
  76:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // read register sstatus
  79:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // write register sstatus
  82:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     //supervisor trap
  85:src/../h/riscv.hpp ****     static void supervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     //friend class memoryAllocator;
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** private:
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** };
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  96:src/../h/riscv.hpp **** {
  97:src/../h/riscv.hpp ****     uint64 volatile scause;
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  99:src/../h/riscv.hpp ****     return scause;
 100:src/../h/riscv.hpp **** }
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 103:src/../h/riscv.hpp **** {
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 105:src/../h/riscv.hpp **** }
 106:src/../h/riscv.hpp **** 
 107:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 108:src/../h/riscv.hpp **** {
 109:src/../h/riscv.hpp ****     uint64 volatile sepc;
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 111:src/../h/riscv.hpp ****     return sepc;
 112:src/../h/riscv.hpp **** }
 113:src/../h/riscv.hpp **** 
 114:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 115:src/../h/riscv.hpp **** {
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 117:src/../h/riscv.hpp **** }
 118:src/../h/riscv.hpp **** 
 119:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 120:src/../h/riscv.hpp **** {
 121:src/../h/riscv.hpp ****     uint64 volatile stvec;
GAS LISTING /tmp/ccLW35yI.s 			page 4


 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 123:src/../h/riscv.hpp ****     return stvec;
 124:src/../h/riscv.hpp **** }
 125:src/../h/riscv.hpp **** 
 126:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 127:src/../h/riscv.hpp **** {
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  33              		.loc 2 128 5 is_stmt 1
  34              		.loc 2 128 69 is_stmt 0
  35              	#APP
  36              	# 128 "src/../h/riscv.hpp" 1
 129              	}
  37              		csrw stvec, a5
  38              	# 0 "" 2
  39              	.LVL2:
  40              	#NO_APP
  41              	.LBE5:
  42              	.LBE4:
  18:src/main.cpp  **** 
  19:src/main.cpp  ****     TCB *m = nullptr;
  43              		.loc 1 19 5 is_stmt 1
  20:src/main.cpp  ****     m = TCB::createThread(nullptr, nullptr, nullptr);
  44              		.loc 1 20 5
  45              		.loc 1 20 26 is_stmt 0
  46 0024 13060000 		li	a2,0
  47 0028 93050000 		li	a1,0
  48 002c 13050000 		li	a0,0
  49 0030 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
  49      E7800000 
  50              	.LVL3:
  21:src/main.cpp  ****     TCB::running = m;
  51              		.loc 1 21 5 is_stmt 1
  52              		.loc 1 21 18 is_stmt 0
  53 0038 97070000 		la	a5,_ZN3TCB7runningE
  53      83B70700 
  54 0040 23B0A700 		sd	a0,0(a5)
  22:src/main.cpp  ****     exit_supervisor();
  55              		.loc 1 22 5 is_stmt 1
  56              		.loc 1 22 20 is_stmt 0
  57 0044 97000000 		call	_Z15exit_supervisorv@plt
  57      E7800000 
  58              	.LVL4:
  23:src/main.cpp  ****     //int a = 0;
  24:src/main.cpp  ****     //asm volatile("csrw sstatus, %0" : : "r" (a));
  25:src/main.cpp  ****     //Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  26:src/main.cpp  ****     /*auto *c = new MemNode[8];
  27:src/main.cpp  ****     int *a = new int();
  28:src/main.cpp  ****     uint64 *u = new uint64();
  29:src/main.cpp  ****     delete(a);
  30:src/main.cpp  ****     delete(u);
  31:src/main.cpp  ****     delete[](c);*/
  32:src/main.cpp  ****     userMain();
  59              		.loc 1 32 5 is_stmt 1
  60              		.loc 1 32 13 is_stmt 0
  61 004c 97000000 		call	_Z8userMainv@plt
  61      E7800000 
  62              	.LVL5:
GAS LISTING /tmp/ccLW35yI.s 			page 5


  33:src/main.cpp  ****     return 0;
  63              		.loc 1 33 5 is_stmt 1
  34:src/main.cpp  **** }...
  64              		.loc 1 34 1 is_stmt 0
  65 0054 13050000 		li	a0,0
  66 0058 83308100 		ld	ra,8(sp)
  67              		.cfi_restore 1
  68 005c 03340100 		ld	s0,0(sp)
  69              		.cfi_restore 8
  70              		.cfi_def_cfa 2, 16
  71 0060 13010101 		addi	sp,sp,16
  72              		.cfi_def_cfa_offset 0
  73 0064 67800000 		jr	ra
  74              		.cfi_endproc
  75              	.LFE37:
  77              	.Letext0:
  78              		.file 3 "src/../lib/hw.h"
  79              		.file 4 "src/../h/memoryAllocator.hpp"
  80              		.file 5 "src/../h/../h/tcb.hpp"
  81              		.file 6 "src/../h/syscall_c.h"
GAS LISTING /tmp/ccLW35yI.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccLW35yI.s:9      .text:0000000000000000 main
     /tmp/ccLW35yI.s:13     .text:0000000000000000 .L0 
     /tmp/ccLW35yI.s:14     .text:0000000000000000 .L0 
     /tmp/ccLW35yI.s:15     .text:0000000000000004 .L0 
     /tmp/ccLW35yI.s:18     .text:000000000000000c .L0 
     /tmp/ccLW35yI.s:19     .text:000000000000000c .L0 
     /tmp/ccLW35yI.s:21     .text:0000000000000010 .L0 
     /tmp/ccLW35yI.s:23     .text:0000000000000010 .L0 
     /tmp/ccLW35yI.s:24     .text:0000000000000010 .L0 
     /tmp/ccLW35yI.s:27     .text:0000000000000018 .L0 
     /tmp/ccLW35yI.s:28     .text:0000000000000018 .L0 
     /tmp/ccLW35yI.s:34     .text:0000000000000020 .L0 
  src/../h/riscv.hpp:128    .text:0000000000000020 .L0 
     /tmp/ccLW35yI.s:44     .text:0000000000000024 .L0 
     /tmp/ccLW35yI.s:45     .text:0000000000000024 .L0 
     /tmp/ccLW35yI.s:46     .text:0000000000000024 .L0 
     /tmp/ccLW35yI.s:52     .text:0000000000000038 .L0 
     /tmp/ccLW35yI.s:53     .text:0000000000000038 .L0 
     /tmp/ccLW35yI.s:56     .text:0000000000000044 .L0 
     /tmp/ccLW35yI.s:57     .text:0000000000000044 .L0 
     /tmp/ccLW35yI.s:60     .text:000000000000004c .L0 
     /tmp/ccLW35yI.s:61     .text:000000000000004c .L0 
     /tmp/ccLW35yI.s:64     .text:0000000000000054 .L0 
     /tmp/ccLW35yI.s:65     .text:0000000000000054 .L0 
     /tmp/ccLW35yI.s:67     .text:000000000000005c .L0 
     /tmp/ccLW35yI.s:69     .text:0000000000000060 .L0 
     /tmp/ccLW35yI.s:70     .text:0000000000000060 .L0 
     /tmp/ccLW35yI.s:72     .text:0000000000000064 .L0 
     /tmp/ccLW35yI.s:74     .text:0000000000000068 .L0 
     /tmp/ccLW35yI.s:82     .text:0000000000000068 .L0 
     /tmp/ccLW35yI.s:28     .text:0000000000000018 .L0 
     /tmp/ccLW35yI.s:53     .text:0000000000000038 .L0 
     /tmp/ccLW35yI.s:931    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccLW35yI.s:1930   .debug_str:000000000000063c .LASF108
     /tmp/ccLW35yI.s:1844   .debug_str:00000000000003ee .LASF109
     /tmp/ccLW35yI.s:1726   .debug_str:0000000000000000 .LASF110
     /tmp/ccLW35yI.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccLW35yI.s:77     .text:0000000000000068 .Letext0
     /tmp/ccLW35yI.s:1724   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccLW35yI.s:1868   .debug_str:0000000000000493 .LASF0
     /tmp/ccLW35yI.s:1880   .debug_str:00000000000004ca .LASF1
     /tmp/ccLW35yI.s:1854   .debug_str:0000000000000437 .LASF2
     /tmp/ccLW35yI.s:1830   .debug_str:0000000000000399 .LASF4
     /tmp/ccLW35yI.s:1908   .debug_str:0000000000000587 .LASF3
     /tmp/ccLW35yI.s:1752   .debug_str:0000000000000108 .LASF5
     /tmp/ccLW35yI.s:1882   .debug_str:00000000000004dd .LASF6
     /tmp/ccLW35yI.s:1866   .debug_str:0000000000000480 .LASF7
     /tmp/ccLW35yI.s:1940   .debug_str:0000000000000749 .LASF8
     /tmp/ccLW35yI.s:1818   .debug_str:000000000000033b .LASF9
     /tmp/ccLW35yI.s:1890   .debug_str:0000000000000508 .LASF10
     /tmp/ccLW35yI.s:1936   .debug_str:000000000000071e .LASF11
     /tmp/ccLW35yI.s:1754   .debug_str:000000000000010f .LASF12
     /tmp/ccLW35yI.s:1732   .debug_str:000000000000004d .LASF13
     /tmp/ccLW35yI.s:1764   .debug_str:000000000000015e .LASF14
     /tmp/ccLW35yI.s:1902   .debug_str:0000000000000553 .LASF15
GAS LISTING /tmp/ccLW35yI.s 			page 7


     /tmp/ccLW35yI.s:1774   .debug_str:00000000000001a2 .LASF16
     /tmp/ccLW35yI.s:1804   .debug_str:00000000000002ad .LASF74
     /tmp/ccLW35yI.s:1922   .debug_str:0000000000000615 .LASF17
     /tmp/ccLW35yI.s:1960   .debug_str:000000000000080f .LASF18
     /tmp/ccLW35yI.s:1948   .debug_str:000000000000079c .LASF19
     /tmp/ccLW35yI.s:1852   .debug_str:0000000000000427 .LASF22
     /tmp/ccLW35yI.s:1924   .debug_str:000000000000061a .LASF20
     /tmp/ccLW35yI.s:1836   .debug_str:00000000000003ae .LASF21
     /tmp/ccLW35yI.s:1782   .debug_str:00000000000001f6 .LASF33
     /tmp/ccLW35yI.s:1938   .debug_str:000000000000072d .LASF24
     /tmp/ccLW35yI.s:1862   .debug_str:000000000000046b .LASF23
     /tmp/ccLW35yI.s:1846   .debug_str:00000000000003fb .LASF25
     /tmp/ccLW35yI.s:1932   .debug_str:0000000000000700 .LASF36
     /tmp/ccLW35yI.s:1750   .debug_str:00000000000000e4 .LASF38
     /tmp/ccLW35yI.s:1874   .debug_str:00000000000004b0 .LASF26
     /tmp/ccLW35yI.s:1780   .debug_str:00000000000001d6 .LASF28
     /tmp/ccLW35yI.s:1778   .debug_str:00000000000001cc .LASF27
     /tmp/ccLW35yI.s:1944   .debug_str:000000000000076e .LASF29
     /tmp/ccLW35yI.s:1802   .debug_str:00000000000002a5 .LASF30
     /tmp/ccLW35yI.s:1794   .debug_str:000000000000024a .LASF31
     /tmp/ccLW35yI.s:1784   .debug_str:000000000000020f .LASF32
     /tmp/ccLW35yI.s:1746   .debug_str:00000000000000ac .LASF34
     /tmp/ccLW35yI.s:1876   .debug_str:00000000000004b9 .LASF35
     /tmp/ccLW35yI.s:1900   .debug_str:0000000000000548 .LASF70
     /tmp/ccLW35yI.s:1954   .debug_str:00000000000007d6 .LASF72
     /tmp/ccLW35yI.s:1734   .debug_str:000000000000005d .LASF37
     /tmp/ccLW35yI.s:1918   .debug_str:00000000000005e8 .LASF39
     /tmp/ccLW35yI.s:1788   .debug_str:0000000000000230 .LASF40
     /tmp/ccLW35yI.s:1786   .debug_str:000000000000021b .LASF41
     /tmp/ccLW35yI.s:1910   .debug_str:0000000000000599 .LASF42
     /tmp/ccLW35yI.s:1892   .debug_str:0000000000000517 .LASF43
     /tmp/ccLW35yI.s:1928   .debug_str:0000000000000635 .LASF44
     /tmp/ccLW35yI.s:1816   .debug_str:0000000000000328 .LASF45
     /tmp/ccLW35yI.s:1808   .debug_str:00000000000002c8 .LASF46
     /tmp/ccLW35yI.s:1776   .debug_str:00000000000001b8 .LASF47
     /tmp/ccLW35yI.s:1728   .debug_str:0000000000000030 .LASF48
     /tmp/ccLW35yI.s:1822   .debug_str:000000000000035f .LASF49
     /tmp/ccLW35yI.s:1828   .debug_str:0000000000000391 .LASF50
     /tmp/ccLW35yI.s:1756   .debug_str:000000000000011f .LASF51
     /tmp/ccLW35yI.s:1824   .debug_str:0000000000000373 .LASF52
     /tmp/ccLW35yI.s:1796   .debug_str:000000000000026a .LASF53
     /tmp/ccLW35yI.s:1870   .debug_str:00000000000004a0 .LASF54
     /tmp/ccLW35yI.s:1950   .debug_str:00000000000007a1 .LASF55
     /tmp/ccLW35yI.s:1888   .debug_str:0000000000000501 .LASF56
     /tmp/ccLW35yI.s:1806   .debug_str:00000000000002b5 .LASF57
     /tmp/ccLW35yI.s:1814   .debug_str:0000000000000322 .LASF58
     /tmp/ccLW35yI.s:1926   .debug_str:0000000000000623 .LASF59
     /tmp/ccLW35yI.s:1742   .debug_str:0000000000000096 .LASF60
     /tmp/ccLW35yI.s:1964   .debug_str:000000000000082b .LASF61
     /tmp/ccLW35yI.s:1958   .debug_str:0000000000000804 .LASF62
     /tmp/ccLW35yI.s:1906   .debug_str:000000000000056f .LASF63
     /tmp/ccLW35yI.s:1878   .debug_str:00000000000004bf .LASF64
     /tmp/ccLW35yI.s:1920   .debug_str:00000000000005fd .LASF65
     /tmp/ccLW35yI.s:1762   .debug_str:0000000000000154 .LASF66
     /tmp/ccLW35yI.s:1826   .debug_str:000000000000037b .LASF67
     /tmp/ccLW35yI.s:1858   .debug_str:0000000000000451 .LASF68
     /tmp/ccLW35yI.s:1820   .debug_str:0000000000000349 .LASF69
GAS LISTING /tmp/ccLW35yI.s 			page 8


     /tmp/ccLW35yI.s:1912   .debug_str:00000000000005a0 .LASF71
     /tmp/ccLW35yI.s:1758   .debug_str:0000000000000133 .LASF73
     /tmp/ccLW35yI.s:1942   .debug_str:0000000000000759 .LASF111
     /tmp/ccLW35yI.s:1842   .debug_str:00000000000003cc .LASF112
     /tmp/ccLW35yI.s:1736   .debug_str:0000000000000066 .LASF75
     /tmp/ccLW35yI.s:1850   .debug_str:0000000000000422 .LASF76
     /tmp/ccLW35yI.s:1894   .debug_str:000000000000052a .LASF77
     /tmp/ccLW35yI.s:1946   .debug_str:000000000000078f .LASF78
     /tmp/ccLW35yI.s:1748   .debug_str:00000000000000d8 .LASF79
     /tmp/ccLW35yI.s:1914   .debug_str:00000000000005af .LASF80
     /tmp/ccLW35yI.s:1898   .debug_str:000000000000053b .LASF81
     /tmp/ccLW35yI.s:1884   .debug_str:00000000000004f0 .LASF82
     /tmp/ccLW35yI.s:1768   .debug_str:0000000000000170 .LASF83
     /tmp/ccLW35yI.s:1856   .debug_str:0000000000000445 .LASF84
     /tmp/ccLW35yI.s:1962   .debug_str:0000000000000814 .LASF85
     /tmp/ccLW35yI.s:1772   .debug_str:0000000000000195 .LASF86
     /tmp/ccLW35yI.s:1952   .debug_str:00000000000007b4 .LASF87
     /tmp/ccLW35yI.s:1896   .debug_str:0000000000000536 .LASF113
     /tmp/ccLW35yI.s:1800   .debug_str:0000000000000291 .LASF88
     /tmp/ccLW35yI.s:1916   .debug_str:00000000000005bf .LASF89
     /tmp/ccLW35yI.s:1864   .debug_str:0000000000000475 .LASF90
     /tmp/ccLW35yI.s:1738   .debug_str:000000000000006e .LASF91
     /tmp/ccLW35yI.s:1934   .debug_str:000000000000070c .LASF92
     /tmp/ccLW35yI.s:1810   .debug_str:00000000000002d0 .LASF93
     /tmp/ccLW35yI.s:1904   .debug_str:0000000000000569 .LASF94
     /tmp/ccLW35yI.s:1860   .debug_str:000000000000045b .LASF95
     /tmp/ccLW35yI.s:1872   .debug_str:00000000000004a7 .LASF96
     /tmp/ccLW35yI.s:1798   .debug_str:000000000000027e .LASF97
     /tmp/ccLW35yI.s:1792   .debug_str:0000000000000242 .LASF114
     /tmp/ccLW35yI.s:1956   .debug_str:00000000000007ee .LASF115
     /tmp/ccLW35yI.s:1834   .debug_str:00000000000003a9 .LASF98
     /tmp/ccLW35yI.s:1766   .debug_str:000000000000016a .LASF99
     /tmp/ccLW35yI.s:1838   .debug_str:00000000000003b7 .LASF100
     /tmp/ccLW35yI.s:1832   .debug_str:00000000000003a0 .LASF101
     /tmp/ccLW35yI.s:1770   .debug_str:0000000000000187 .LASF116
     /tmp/ccLW35yI.s:1812   .debug_str:00000000000002fa .LASF117
     /tmp/ccLW35yI.s:1848   .debug_str:0000000000000417 .LASF118
     /tmp/ccLW35yI.s:1740   .debug_str:0000000000000091 .LASF102
     /tmp/ccLW35yI.s:1760   .debug_str:000000000000014f .LASF103
     /tmp/ccLW35yI.s:10     .text:0000000000000000 .LFB37
     /tmp/ccLW35yI.s:75     .text:0000000000000068 .LFE37
     /tmp/ccLW35yI.s:1699   .debug_loc:0000000000000000 .LLST0
     /tmp/ccLW35yI.s:30     .text:0000000000000020 .LBB4
     /tmp/ccLW35yI.s:42     .text:0000000000000024 .LBE4
     /tmp/ccLW35yI.s:25     .text:0000000000000018 .LVL0
     /tmp/ccLW35yI.s:50     .text:0000000000000038 .LVL3
     /tmp/ccLW35yI.s:58     .text:000000000000004c .LVL4
     /tmp/ccLW35yI.s:62     .text:0000000000000054 .LVL5
     /tmp/ccLW35yI.s:1886   .debug_str:00000000000004fb .LASF119
     /tmp/ccLW35yI.s:1730   .debug_str:0000000000000038 .LASF104
     /tmp/ccLW35yI.s:1744   .debug_str:000000000000009c .LASF106
     /tmp/ccLW35yI.s:1840   .debug_str:00000000000003bf .LASF105
     /tmp/ccLW35yI.s:1790   .debug_str:0000000000000239 .LASF107
     /tmp/ccLW35yI.s:39     .text:0000000000000024 .LVL2
     /tmp/ccLW35yI.s:83     .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
GAS LISTING /tmp/ccLW35yI.s 			page 9


_ZN15MemoryAllocator11getInstanceEv
_ZN5Riscv14supervisorTrapEv
_ZN3TCB12createThreadEPFvPvES0_Pm
_ZN3TCB7runningE
_Z15exit_supervisorv
_Z8userMainv
